{"version":3,"sources":["api.js","Loading.js","AgeToVaccinationRateGraph.js","App.js","reportWebVitals.js","index.js"],"names":["api","getAll","a","isEmpty","database","console","log","fetch","response","json","save","jsonResponse","Object","keys","length","jsonData","fileData","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","download","href","click","Loading","style","width","textAlign","CircularProgress","margin","AgeToVaccinationRateGraph","useState","undefined","rawData","setRawData","manipulatedData","setManipulatedData","corrCoeff","setCorrCoeff","useEffect","then","manipulated","onlySydney","Data","filter","Area","Name4","includes","data","map","index","CovidVaccine","row","Array","fill","CensusStats","Age","Median","Num1Dose","placeNames","replace","manipulate","newP","vaccDoses","reduce","acc","curr","age","combined","vaccinated","vars","Statistics","correlationCoefficient","toFixed","getCorrelationCoefficient","height","chartArea","chartType","loader","options","title","hAxis","vAxis","trendlines","0","showR2","visibleInLegend","lineWidth","pointSize","series","rootProps","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c373055f.chunk.js","sourcesContent":["import database from './database.json';\n \nconst BASE_URL = process.env.NODE_ENV === 'development' ?\n    'http://localhost:5000' : 'someprodurl'\n\nconst databaseFileName = 'database.json';\nexport const api = {\n    getAll: async () => {\n        if (isEmpty(database)) {\n            console.log('getting new')\n            const response = await fetch(`${BASE_URL}/api/areas`);\n            const jsonResponse = await response.json();\n            save(jsonResponse);\n            return jsonResponse;\n        } else {\n            console.log('used saved')\n            return database;\n        }\n    }\n}\n\nfunction isEmpty(database) {\n    return Object.keys(database).length === 0;\n}\n\nfunction save(jsonData) {\n    const fileData = JSON.stringify(jsonData);\n    const blob = new Blob([fileData], { type: \"text/plain\" });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.download = `${databaseFileName}`;\n    link.href = url;\n    link.click();\n}\n","import React from 'react';\nimport { CircularProgress } from '@material-ui/core';\n\nexport const Loading = () => {\n    return <div style={{ width: '100%', textAlign: 'center' }}>\n        <h3>Loading...</h3>\n        <CircularProgress style={{ margin: '0 auto' }} />\n    </div>;\n};","import { useEffect, useState } from \"react\";\nimport Chart from \"react-google-charts\";\nimport { api } from \"./api\";\nimport Statistics from 'statistics.js';\nimport jStat from 'jstat';\nimport { Loading } from \"./Loading\";\n\nexport const AgeToVaccinationRateGraph = () => {\n\n    const [rawData, setRawData] = useState(undefined)\n    const [manipulatedData, setManipulatedData] = useState(undefined)\n    const [corrCoeff, setCorrCoeff] = useState(undefined)\n\n    useEffect(() => {\n        api.getAll().then(setRawData);\n    }, []);\n\n    useEffect(() => {\n        if (rawData) {\n            const manipulated = manipulate(rawData);\n            setManipulatedData(manipulated)\n        }\n    }, [rawData]);\n\n    useEffect(() => {\n        if (manipulatedData) {\n            const newP = getCorrelationCoefficient(manipulatedData);\n            setCorrCoeff(newP)\n        }\n    }, [manipulatedData]);\n\n    return manipulatedData ?\n        <div>\n            <Chart\n                width={'800px'}\n                height={'500px'}\n                chartArea={{ width: \"100%\", height: \"100%\" }}\n                chartType=\"LineChart\"\n                loader={<Loading />}\n                data={\n                    [\n                        ['x', 'Vaccinated', ...manipulatedData.placeNames],\n                        ...manipulatedData.data\n                    ]\n                }\n                options={{\n                    title: `Age vs Vaccination Rate (r = ${corrCoeff})`,\n                    hAxis: { title: 'Median age' },\n                    vAxis: { title: '% at least 1 dose' },\n                    trendlines: {\n                        0: { type: 'linear', showR2: false, visibleInLegend: false, lineWidth: 3, pointSize: 0, }\n                    },\n                    lineWidth: 0,\n                    pointSize: 5,\n                    series: {\n                        0: { pointSize: 0, visibleInLegend: false },\n                    },\n                }}\n                rootProps={{ 'data-testid': '1' }}\n            />\n        </div> : <Loading/>\n};\n\nfunction manipulate({ Data }) {\n    const onlySydney = Data.filter(({ Area }) => Area.Name4.includes('Sydney'))\n    const data = onlySydney\n        .map(({ Area, CovidVaccine }, index) => {\n            const row = new Array(onlySydney.length + 2).fill(null);\n            row[0] = Area.CensusStats.Age.Median;\n            row[1] = CovidVaccine.Num1Dose\n            row[index + 2] = CovidVaccine.Num1Dose;\n            return row;\n        });\n\n    return {\n        data,\n        placeNames: onlySydney.map(({ Area }) => Area.Name4.replace(\"Sydney - \", \"\"))\n    }\n}\n\nfunction getCorrelationCoefficient(manipulatedData) {\n    const vaccDoses = manipulatedData.data.reduce((acc, curr) => [...acc, curr[1]], [])\n    const age = manipulatedData.data.reduce((acc, curr) => [...acc, curr[0]], []);\n    const combined = vaccDoses.map((vaccinated, index) => ({ age: age[index], vaccinated }))\n    const vars = { age: 'metric', vaccinated: 'metric' };\n    var stats = new Statistics(combined, vars);\n    const r = stats.correlationCoefficient('age', 'vaccinated').correlationCoefficient;\n    return r.toFixed(3);\n}\n","import './App.css';\nimport { AgeToVaccinationRateGraph } from './AgeToVaccinationRateGraph';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <AgeToVaccinationRateGraph />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}