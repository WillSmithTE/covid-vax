{"version":3,"sources":["Loading.js","VaccinationGraph.js","AgeToVaccinationRate.js","SalaryToVaccinationRate.js","NumPeopleInHousehold.js","Religion.js","api.js","MotorVehicles.js","HoursWorked.js","Ancestry.js","App.js","reportWebVitals.js","index.js"],"names":["Loading","style","width","textAlign","color","CircularProgress","margin","VaccinationGraph","rawData","title","yTitle","getY","useState","undefined","manipulatedData","setManipulatedData","corrCoeff","setCorrCoeff","useEffect","manipulated","onlySydney","Data","filter","Area","Name4","includes","data","map","index","CovidVaccine","row","Array","length","fill","yData","Num1Dose","placeNames","replace","manipulate","newP","vaccDoses","reduce","acc","curr","y","combined","vaccinated","vars","Statistics","correlationCoefficient","toFixed","getCorrelationCoefficient","flexGrow","minWidth","padding","height","chartArea","chartType","loader","options","hAxis","vAxis","trendlines","0","type","showR2","visibleInLegend","lineWidth","pointSize","series","rootProps","AgeToVaccinationRate","CensusStats","Age","Median","SalaryToVaccinationRate","Income","MedianHousehold","NumPeopleInHousehold","AvgPeoplePerHousehold","Religion","correlations","Computed","ReligionCorrelations","rows","Object","entries","key","value","cleanedReligionName","push","sort","a","b","religion","legend","api","getAll","isEmpty","database","console","log","fetch","response","json","save","jsonResponse","keys","jsonData","fileData","JSON","stringify","blob","Blob","url","URL","createObjectURL","link","document","createElement","download","href","click","MotorVehicles","AverageMotorVehiclesPerDwelling","HoursWorked","error","Average","Ancestry","AncestryCorrelations","App","setRawData","then","className","display","flexWrap","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3909f506.chunk.js","sourcesContent":["import React from 'react';\nimport { CircularProgress } from '@material-ui/core';\n\nexport const Loading = () => {\n    return <div style={{ width: '100%', textAlign: 'center' }}>\n        <h3 style={{color: 'orange'}}>Loading...</h3>\n        <CircularProgress style={{ margin: '0 auto', color: 'orange' }} />\n    </div>;\n};","import { useEffect, useState } from \"react\";\nimport Chart from \"react-google-charts\";\nimport Statistics from 'statistics.js';\nimport { Loading } from \"./Loading\";\n\nexport const VaccinationGraph = ({rawData, title, yTitle, getY}) => {\n\n    const [manipulatedData, setManipulatedData] = useState(undefined)\n    const [corrCoeff, setCorrCoeff] = useState(undefined)\n\n    useEffect(() => {\n        if (rawData) {\n            const manipulated = manipulate(rawData, getY);\n            setManipulatedData(manipulated)\n        }\n    }, [rawData, getY]);\n\n    useEffect(() => {\n        if (manipulatedData) {\n            const newP = getCorrelationCoefficient(manipulatedData);\n            setCorrCoeff(newP)\n        }\n    }, [manipulatedData]);\n\n    return manipulatedData ?\n        <div style={{flexGrow: 1, width: '40%', minWidth: '350px', padding: '10px' }}>\n            <Chart\n                style={{ margin: '0 auto', }}\n                // width={'800px'}\n                height={'500px'}\n                chartArea={{ width: \"100%\", height: \"100%\" }}\n                chartType=\"LineChart\"\n                loader={<Loading />}\n                data={\n                    [\n                        ['x', 'Vaccinated', ...manipulatedData.placeNames],\n                        ...manipulatedData.data\n                    ]\n                }\n                options={{\n                    hAxis: { title: '% at least 1 dose' },\n                    vAxis: { title: yTitle },\n                    title: `${title} (r = ${corrCoeff})`,\n                    trendlines: {\n                        0: { type: 'linear', showR2: false, visibleInLegend: false, lineWidth: 3, pointSize: 0, }\n                    },\n                    lineWidth: 0,\n                    pointSize: 5,\n                    series: {\n                        0: { pointSize: 0, visibleInLegend: false },\n                    },\n                }}\n                rootProps={{ 'data-testid': '1' }}\n            />\n        </div> : <Loading />\n};\n\nfunction manipulate({ Data }, getY) {\n    const onlySydney = Data.filter(({ Area }) => Area.Name4.includes('Sydney'))\n    const data = onlySydney\n        .map(({ Area, CovidVaccine }, index) => {\n            const row = new Array(onlySydney.length + 2).fill(null);\n            const yData = getY(Area, CovidVaccine)\n            row[0] = CovidVaccine.Num1Dose\n            row[1] = yData\n            row[index + 2] = yData\n            return row;\n        });\n\n    return {\n        data,\n        placeNames: onlySydney.map(({ Area }) => Area.Name4.replace(\"Sydney - \", \"\"))\n    }\n}\n\nfunction getCorrelationCoefficient(manipulatedData) {\n    const vaccDoses = manipulatedData.data.reduce((acc, curr) => [...acc, curr[0]], [])\n    const y = manipulatedData.data.reduce((acc, curr) => [...acc, curr[1]], []);\n    const combined = vaccDoses.map((vaccinated, index) => ({ y: y[index], vaccinated }))\n    const vars = { y: 'metric', vaccinated: 'metric' };\n    var stats = new Statistics(combined, vars);\n    const r = stats.correlationCoefficient('y', 'vaccinated').correlationCoefficient;\n    return r.toFixed(3);\n}\n","import { VaccinationGraph } from \"./VaccinationGraph\";\n\nexport const AgeToVaccinationRate = ({rawData}) => {\n\n    return <VaccinationGraph\n        title='Vaccination Rate vs Age'\n        yTitle='Median age'\n        getY={(Area) => Area.CensusStats.Age.Median}\n        rawData={rawData}\n    />\n};\n","import { VaccinationGraph } from \"./VaccinationGraph\";\n\nexport const SalaryToVaccinationRate = ({rawData}) => {\n\n    return <VaccinationGraph\n        title='Vaccination Rate vs Salary'\n        yTitle='Median household weekly salary'\n        getY={(Area) => Area.CensusStats.Income.MedianHousehold}\n        rawData={rawData}\n    />\n};\n","import { VaccinationGraph } from \"./VaccinationGraph\";\n\nexport const NumPeopleInHousehold = ({rawData}) => {\n\n    return <VaccinationGraph\n        title='Vaccination Rate vs Household Size'\n        yTitle='Average household size'\n        getY={(Area) => Area.CensusStats.AvgPeoplePerHousehold}\n        rawData={rawData}\n    />\n};","import { useEffect, useState } from \"react\";\nimport Chart from \"react-google-charts\";\nimport { Loading } from \"./Loading\";\n\nexport const Religion = ({ rawData, }) => {\n\n    const [manipulatedData, setManipulatedData] = useState(undefined)\n\n    useEffect(() => {\n        if (rawData) {\n            const manipulated = manipulate(rawData);\n            setManipulatedData(manipulated)\n        }\n    }, [rawData]);\n\n    return manipulatedData ?\n        <div style={{ flexGrow: 1, width: '40%', minWidth: '350px', padding: '10px' }}>\n            <Chart\n                style={{ margin: '0 auto', }}\n                height={'500px'}\n                chartArea={{ width: \"100%\", height: \"100%\" }}\n                chartType=\"ColumnChart\"\n                loader={<Loading />}\n                data={\n                    [\n                        ['Religion', 'Correlation'],\n                        ...manipulatedData,\n                    ]\n                }\n                options={{\n                    legend: 'none',\n                    hAxis: { title: 'Religion' },\n                    vAxis: { title: 'Correlation Coefficient (r)' },\n                    title: `Correlation Between Religion and Vaccination Rate`,\n                    chartArea: { width: '50%', height: '50%' },\n\n                }}\n                rootProps={{ 'data-testid': '1' }}\n            />\n        </div> : <Loading />\n};\n\nfunction manipulate({ Computed }) {\n    const correlations = Computed.ReligionCorrelations;\n    const rows = [];\n    for (const [key, value] of Object.entries(correlations)) {\n        let cleanedReligionName = key.replace(\"_P\", \"\");\n        if (cleanedReligionName === 'SB_OSB_NRA_NR') {\n            cleanedReligionName = 'None'\n        } else if (cleanedReligionName === 'Christianity_Tot') {\n            cleanedReligionName = 'Christianity'\n        }\n        rows.push([cleanedReligionName, value]);\n    };\n\n    rows.sort((a, b) => a[1] > b[1] ? 1 : -1);\n\n    return rows\n        .filter(([religion]) => ['None', 'Christianity', 'Islam', 'Judaism', 'Hinduism', 'Buddhism'].includes(religion))\n}\n","import database from './database.json';\n \nconst BASE_URL = process.env.NODE_ENV === 'development' ?\n    'http://localhost:5000' : 'someprodurl'\n\nconst databaseFileName = 'database.json';\nexport const api = {\n    getAll: async () => {\n        if (isEmpty(database)) {\n            console.log('getting new')\n            const response = await fetch(`${BASE_URL}/api/areas`);\n            const jsonResponse = await response.json();\n            save(jsonResponse);\n            return jsonResponse;\n        } else {\n            console.log('used saved')\n            return database;\n        }\n    }\n}\n\nfunction isEmpty(database) {\n    return Object.keys(database).length === 0;\n}\n\nfunction save(jsonData) {\n    const fileData = JSON.stringify(jsonData);\n    const blob = new Blob([fileData], { type: \"text/plain\" });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.download = `${databaseFileName}`;\n    link.href = url;\n    link.click();\n}\n","import { VaccinationGraph } from \"./VaccinationGraph\";\n\nexport const MotorVehicles = ({rawData}) => {\n\n    return <VaccinationGraph\n        title='Vaccination Rate vs Motor Vehicles per Dwelling'\n        yTitle='Average number motor vehicles per dwelling'\n        getY={(Area) => Area.CensusStats.AverageMotorVehiclesPerDwelling}\n        rawData={rawData}\n    />\n};\n","import { VaccinationGraph } from \"./VaccinationGraph\";\n\nexport const HoursWorked = ({rawData}) => {\n    console.error({rawData})\n    return <VaccinationGraph\n        title='Vaccination Rate vs Number of Hours Worked'\n        yTitle='Average number hours worked'\n        getY={(Area) => Area.CensusStats.HoursWorked.Average}\n        rawData={rawData}\n    />\n};\n","import { useEffect, useState } from \"react\";\nimport Chart from \"react-google-charts\";\nimport { Loading } from \"./Loading\";\n\nexport const Ancestry = ({ rawData, }) => {\n\n    const [manipulatedData, setManipulatedData] = useState(undefined)\n\n    console.error({rawData})\n    useEffect(() => {\n        if (rawData) {\n            const manipulated = manipulate(rawData);\n            setManipulatedData(manipulated)\n        }\n    }, [rawData]);\n\n    return manipulatedData ?\n        <div style={{ flexGrow: 1, width: '40%', minWidth: '350px', padding: '10px' }}>\n            <Chart\n                style={{ margin: '0 auto', }}\n                height={'500px'}\n                chartArea={{ width: \"100%\", height: \"100%\" }}\n                chartType=\"ColumnChart\"\n                loader={<Loading />}\n                data={\n                    [\n                        ['Ancestry', 'Correlation'],\n                        ...manipulatedData,\n                    ]\n                }\n                options={{\n                    legend: 'none',\n                    hAxis: { title: 'Ancestry' },\n                    vAxis: { title: 'Correlation Coefficient (r)' },\n                    title: `Correlation Between Ancestry and Vaccination Rate`,\n                    chartArea: { width: '50%', height: '50%' },\n\n                }}\n                rootProps={{ 'data-testid': '1' }}\n            />\n        </div> : <Loading />\n};\n\nfunction manipulate({ Computed }) {\n    const correlations = Computed.AncestryCorrelations;\n    const rows = [];\n    for (const [key, value] of Object.entries(correlations)) {\n        let cleanedReligionName = key.replace(\"_Tot_Resp\", \"\");\n        rows.push([cleanedReligionName, value]);\n    };\n\n    rows.sort((a, b) => a[1] > b[1] ? 1 : -1);\n\n    return rows\n        // .filter(([religion]) => ['None', 'Christianity', 'Islam', 'Judaism', 'Hinduism', 'Buddhism'].includes(religion))\n}\n","import './App.css';\nimport { AgeToVaccinationRate } from './AgeToVaccinationRate';\nimport { SalaryToVaccinationRate } from './SalaryToVaccinationRate';\nimport { NumPeopleInHousehold } from './NumPeopleInHousehold';\nimport { Religion } from './Religion';\nimport { useEffect, useState } from 'react';\nimport { api } from './api';\nimport { MotorVehicles } from './MotorVehicles';\nimport { HoursWorked } from './HoursWorked';\nimport { Ancestry } from './Ancestry';\n\nconst App = () => {\n  const [rawData, setRawData] = useState(undefined)\n\n  useEffect(() => {\n    api.getAll().then(setRawData);\n  }, []);\n\n  return <>\n    <h1 style={{ color: 'antiquewhite', textAlign: 'center' }}>Sydney Covid Vaccine Stats (2/8/2021)</h1>\n    <div className=\"App\" style={{ display: 'flex', flexWrap: 'wrap', padding: '0 10px' }}>\n      <HoursWorked rawData={rawData} />\n      <MotorVehicles rawData={rawData} />\n      <Religion rawData={rawData} />\n      <Ancestry rawData={rawData} />\n      <AgeToVaccinationRate rawData={rawData} />\n      <NumPeopleInHousehold rawData={rawData} />\n      <SalaryToVaccinationRate rawData={rawData} />\n    </div>\n  </>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}